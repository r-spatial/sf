% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom-predicates.R
\name{st_equals}
\alias{st_equals}
\alias{st_equals_exact}
\title{Verify if geographies are equal}
\usage{
st_equals(
  x,
  y,
  sparse = TRUE,
  prepared = FALSE,
  ...,
  retain_unique = FALSE,
  remove_self = FALSE
)

st_equals_exact(x, y, par, sparse = TRUE, prepared = FALSE, ...)
}
\arguments{
\item{x}{object of class \code{sf}, \code{sfc} or \code{sfg}}

\item{y}{object of class \code{sf}, \code{sfc} or \code{sfg}; if missing, \code{x} is used}

\item{sparse}{logical; should a sparse index list be returned (\code{TRUE}) or a dense logical matrix? See below.}

\item{prepared}{logical; prepare geometry for \code{x}, before looping over \code{y}? See Details.}

\item{...}{passed on to \code{\link[s2:s2_options]{s2::s2_options()}}}

\item{retain_unique}{logical; if \code{TRUE} (and \code{y} is missing) return only
indexes of points larger than the current index; this can be used to select
unique geometries, see examples. This argument can be used for all geometry predicates;
see also \link{distinct.sf} to find records where geometries AND attributes are distinct.}

\item{remove_self}{logical; if \code{TRUE} (and \code{y} is missing) return only indexes of geometries different from the current index; this can be used to omit self-intersections; see examples.
This argument can be used for all geometry predicates}

\item{par}{numeric; parameter used for "equals_exact" (margin);}
}
\description{
\itemize{
\item \code{st_equals()} validate if x and y are equal.
\item \code{st_equals_exact()} returns true for two geometries of the same type and their vertices corresponding by index are equal up to a specified tolerance.
}
}
\examples{
# remove duplicate geometries:
p1 = st_point(0:1)
p2 = st_point(2:1)
p = st_sf(a = letters[1:8], geom = st_sfc(p1, p1, p2, p1, p1, p2, p2, p1))
st_equals(p)
st_equals(p, remove_self = TRUE)
(u = st_equals(p, retain_unique = TRUE))
# retain the records with unique geometries:
p[-unlist(u),]
}
\seealso{
Other geometric binary predicates for two spatial objects: 
\code{\link{geos_binary_pred}},
\code{\link{st_contains}()},
\code{\link{st_intersects}()}
}
\concept{geometric binary predicates for two spatial objects}
